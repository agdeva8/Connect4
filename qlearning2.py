# -*- coding: utf-8 -*-/
"""QLearning2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11l6hom0CfM5EioaNO8TR0Gw6shNLUgiN
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf

# !cat /proc/cpuinfo

import numpy as np
from queue import Queue
from collections import deque
import time
import random
from tqdm import tqdm
import os

from itertools import product
import sys
import threading
from subprocess import Popen, PIPE

from Connect4Env import Connect4Env
# tf.config.threading.set_inter_op_parallelism_threads(10000)
# tf.config.threading.set_intra_op_parallelism_threads(10000)

# with tf.device('/device:GPU:0'):
# with tf.device('/cpu:0'):
DISCOUNT = 0.8
REPLAY_MEMORY_SIZE = 50000  # How many last steps to keep for model training
MIN_REPLAY_MEMORY_SIZE = 1000  # Minimum number of steps to start training
MINIBATCH_SIZE = 500  # How many steps (samples) to use for training
UPDATE_TARGET_EVERY = 5  # Terminal states (end of episodes)
MODEL_NAME = '6x7'
MEMORY_FRACTION = 0.20
MIN_REWARD = 100

# Environment settings
EPISODES = 4000000

# Exploration settings
epsilon = 0.15

#  Stats settings
AGGREGATE_STATS_EVERY = 50  # episodes
SHOW_PREVIEW = False

env = Connect4Env()

# For stats
ep_rewards = [-200]

# For more repetitive results
random.seed(1)
np.random.seed(1)
tf.compat.v2.random.set_seed(1)

path = "models/"
baseFileName = "Connect4"
val = 1
extension = ".h5"

# # tf.random.set_seet(1)
# tf.set_random_seed(1)

# Memory fraction, used mostly when trai8ning multiple agents
# gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=MEMORY_FRACTION)
# backend.set_session(tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)))

# Create models folder
if not os.path.isdir('models'):
    os.makedirs('models')

TRAIN_PIPE_PATH = "/tmp/my_log_pipe"
if not os.path.exists(TRAIN_PIPE_PATH):
    os.mkfifo(TRAIN_PIPE_PATH)
Popen(['xterm', '-e', 'tail -f %s' % TRAIN_PIPE_PATH])

# for _ in range(5):
#     with open(TRAIN_PIPE_PATH, "w") as p:
#         p.write("Hello world!\n")

EPS_PIPE_PATH = "/tmp/my_eps_pipe"
if not os.path.exists(EPS_PIPE_PATH):
    os.mkfifo(EPS_PIPE_PATH)
Popen(['xterm', '-e', 'tail -f %s' % EPS_PIPE_PATH])


# Agent class
class DQNAgent:
    def __init__(self):

        # Main model
        self.model = self.create_model()

        # Target network
        self.target_model = self.create_model()
        self.target_model.set_weights(self.model.get_weights())

        # An array with last n steps for training
        # self.replay_memory = Queue(maxsize=REPLAY_MEMORY_SIZE)
        self.replay_memory = deque(maxlen=REPLAY_MEMORY_SIZE)

        # Used to count when to update target network with main network's weights
        self.target_update_counter = 0

    def create_model(self):
        model = tf.keras.models.Sequential()

        model.add(
            tf.keras.layers.Conv2D(64,
                                   kernel_size=(1, 1),
                                   strides=(1, 1),
                                   activation='relu',
                                   input_shape=(6, 7, 1)))

        model.add(tf.keras.layers.Flatten())

        model.add(tf.keras.layers.Dense(512))
        model.add(tf.keras.layers.Activation('relu'))

        model.add(tf.keras.layers.Dense(256))
        model.add(tf.keras.layers.Activation('relu'))

        model.add(tf.keras.layers.Dense(128))
        model.add(tf.keras.layers.Activation('relu'))

        model.add(tf.keras.layers.Dense(64))
        model.add(tf.keras.layers.Activation('relu'))

        # model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
        model.add(
            tf.keras.layers.Dense(env.action_space.n, activation='linear')
        )  # ACTION_SPACE_SIZE = how many choices (9)
        model.compile(loss="mse",
                      optimizer=tf.keras.optimizers.Adam(lr=0.001),
                      metrics=['accuracy'])
        return model

    # Adds step's data to a memory replay array
    # (observation space, action, reward, new observation space, done)
    def update_replay_memory(self, transition):
        self.replay_memory.append(transition)
        # self.replay_memory.put(transition)

    # Trains main network every step during episode
    #

    def train2(self):
        while True:
            # Start training only if certain number of samples is already saved
            with open(TRAIN_PIPE_PATH, "w") as p:
                p.write("memory is " + str(len(self.replay_memory)) + "\n")
            # if self.replay_memory.qsize() < MIN_REPLAY_MEMORY_SIZE:
            if len(self.replay_memory) < MIN_REPLAY_MEMORY_SIZE:
                continue

            # Get a minibatch of random samples from memory replay table
            # minibatch = list()
            # for i in range(MINIBATCH_SIZE):
            #     minibatch.append(self.replay_memory.get())

            minibatch = random.sample(self.replay_memory, MINIBATCH_SIZE)

            # Get current states from minibatch, then query NN model for Q values
            current_states = np.array(
                [transition[0] for transition in minibatch])
            current_qs_list = self.model.predict(
                current_states.reshape((-1, 6, 7, 1)))

            # Get future states from minibatch, then query NN model for Q values
            # When using target network, query it, otherwise main network should be queried
            new_current_states = np.array(
                [transition[4] for transition in minibatch])
            future_qs_list = self.target_model.predict(
                new_current_states.reshape((-1, 6, 7, 1)))

            X = []
            y = []

            # Now we need to enumerate our batches
            for index, (current_state, current_player, action, reward,
                        new_current_state, done) in enumerate(minibatch):
                # If not a terminal state, get new q from future states, otherwise set it to 0
                # almost like with Q Learning, but we use just part of equation here
                if not done:
                    if current_player == 1:
                        future_q = np.max(future_qs_list[index])
                    else:
                        future_q = np.min(future_qs_list[index])
                    new_q = reward + DISCOUNT * future_q
                else:
                    new_q = reward
                    # Update target network counter every episode
                    self.target_update_counter += 1

                # Update Q value for given state
                current_qs = current_qs_list[index]
                current_qs[action] = new_q

                # And append to our training data
                X.append(current_state)
                y.append(current_qs)

            # Fit on all samples as one batch, log only on terminal state
            history = self.model.fit(np.array(X).reshape((-1, 6, 7, 1)),
                                     np.array(y),
                                     batch_size=MINIBATCH_SIZE,
                                     verbose=2,
                                     shuffle=True)

            for i in range(int(abs(new_q) / 50)):
                self.model.fit(np.array(X).reshape((-1, 6, 7, 1)),
                               np.array(y),
                               batch_size=MINIBATCH_SIZE,
                               verbose=0,
                               shuffle=True)

            # If counter reaches set value, update target network with weights of main network
            reset = False
            while self.target_update_counter > UPDATE_TARGET_EVERY:
                self.target_model.set_weights(self.model.get_weights())
                self.target_update_counter = self.target_update_counter - 1
                reset = True

            if reset:
                self.target_update_counter = 0

    # Queries main network for Q values given current observation space
    def get_qs(self, state):
        return self.model.predict(np.array(state).reshape((-1, 6, 7, 1)))[0]


agent = DQNAgent()


def f(episode, env):
    global agent
    global epsilon

    if episode % 1000 == 0:
        agent.model.save(path + baseFileName + "_" + MODEL_NAME + "_" +
                         str(episode) + extension,
                         overwrite=True)

    # Update tensorboard step every episode
    # Restarting episode - reset episode reward and step number
    episode_reward = 0
    step = 1

    # Reset environment and get initial state
    current_state = env.reset()
    current_player = 1

    # Reset flag and start iterating until episode ends
    done = False
    while not done:
        # This part stays mostly the same,
        # the change is to query a model for Q values
        if np.random.random() > epsilon:
            # Get action from Q table
            if current_player == 1:
                action = np.argmax(agent.get_qs(current_state))
            else:
                action = np.argmin(agent.get_qs(current_state))
        else:
            # Get random action
            action = np.random.randint(0, env.action_space.n)

        current_player = current_player * -1

        [new_state, reward, done, info] = env.step(action)

        # Transform new continous state to new discrete state and count reward
        episode_reward += reward

        # Every step we update replay memory and train main network
        agent.update_replay_memory(
            (current_state, current_player, action, reward, new_state, done))

        current_state = new_state
        step += 1


trainThread = threading.Thread(target=agent.train2)
trainThread.start()

envs = list()
for i in range(UPDATE_TARGET_EVERY):
    envs.append(Connect4Env())

fullFileName = path + baseFileName + "_" + MODEL_NAME + "_" + str(
    val) + extension

# agent.model = tf.keras.models.load_model(fullFileName)

# with open(EPS_PIPE_PATH, "w") as p:
p = open(EPS_PIPE_PATH, 'w', 1)
for episode in range(val, EPISODES + 1, UPDATE_TARGET_EVERY):
    st = time.time()
    threads = []
    for i in range(UPDATE_TARGET_EVERY):
        t = threading.Thread(target=f, args=(
            episode + i,
            envs[i],
        ))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    end = time.time()
    with open(EPS_PIPE_PATH, "w") as p:
        p.write("Episode Num " + str(episode) + "\t | \t " +
                str(UPDATE_TARGET_EVERY) + "episodes / " + str(end - st) +
                "secs \n")

    # print("######### Episode Num {}  / {}episode / {}secs ########## \n".
    #           format(episode, UPDATE_TARGET_EVERY, end - st))

agent.model.save("{}{}_{}_{}{}".format(path, baseFileName, MODEL_NAME,
                                       str(episode), extension),
                 overwrite=True)
